name: Deploy to EC2

on:
  push:
    branches: [ main ]  # main 브랜치에 push가 발생하면 워크플로우 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code  # 코드 체크아웃
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Deploy to EC2  # EC2에 배포
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          # SSH 키 설정
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          
          # JAR 파일을 EC2로 전송
          scp -i private_key -o StrictHostKeyChecking=no ./build/libs/*.jar ${USER}@${HOST}:/home/${USER}/app/app.jar
          
          # EC2에 SSH 접속하여 애플리케이션 재시작
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            export DATASOURCE_USERNAME="${DATASOURCE_USERNAME}"
            export DATASOURCE_PASSWORD="${DATASOURCE_PASSWORD}"
            export DATASOURCE_URL="${DATASOURCE_URL}"
            export JWT_SECRET="${JWT_SECRET}"
            cd /home/${USER}/app
            pkill -f 'java -jar app.jar' || true
            nohup java -jar app.jar > app.log 2>&1 &
          '

      - name: Clean up  # 임시 파일 정리
        run: rm -f private_key
