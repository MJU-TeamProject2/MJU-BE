name: CI/CD to Amazon EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Print current directory
        run: pwd

      - name: List all files in the workspace
        run: ls -R $GITHUB_WORKSPACE

      - name: Verify JAR file existence
        run: ls -l build/libs/
        continue-on-error: true

      - name: Run tests
        run: |
          ./gradlew test --info
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: validate
          SPRING_JPA_SHOW_SQL: "true"

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copy files to EC2 with SCP
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST_DNS: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          JAR_FILE=$(ls $GITHUB_WORKSPACE/build/libs/*.jar | grep -v plain | head -n 1)  # 절대 경로로 변경
          echo "Deploying $JAR_FILE"
          scp -o StrictHostKeyChecking=no -i private_key $JAR_FILE ${EC2_USER}@${HOST_DNS}:~/app.jar

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST_DNS: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${HOST_DNS} '
            sudo systemctl stop tp2-server || true
            sudo mv ~/app.jar /opt/tp2-server/app.jar
            sudo systemctl start tp2-server
            sudo systemctl status tp2-server
          '

      - name: Clean up
        if: always()
        run: rm -f private_key